<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="PagesStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAAAAAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAABIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AICAgABAQEAAwMDAACAgIACgoKAAYGBgAODg4AAQEBAA0NDQADAwMACwsLAAUFBQAJCQ
        kABwcHAA8PDwAOjo6AAYGBgA2NjYACgoKADIyMgAODg4ALi4uABISEgAqKioAFhYWACYmJgAaGhoAIiI
        iAB4eHgABwcHAPj4+AALCwsA9PT0AOzs7AAUFBQA5OTkABwcHADc3NwAJCQkANTU1AAsLCwAzMzMADQ0
        NADExMQAPDw8ALy8vABEREQAtLS0AExMTACsrKwAVFRUAKSkpABcXFwAnJycAGRkZACUlJQAbGxsAIyM
        jAB0dHQAhISEAHx8fAADAwMA/Pz8AAUFBQD6+voACQkJAPb29gANDQ0A8vLyAO7u7gASEhIA6urqABYW
        FgDm5uYAGhoaAOLi4gAeHh4A3t7eACIiIgDa2toAJiYmANbW1gAqKioA0tLSAC4uLgDOzs4AMjIyAMrK
        ygA2NjYAxsbGADo6OgDCwsIAPj4+AL6+vgBCQkIAurq6AEZGRgC2trYATk5OALKysgBSUlIArq6uAFZW
        VgCqqqoAWlpaAKampgBeXl4AoqKiAGJiYgCenp4AZmZmAJqamgBqamoAlpaWAG5ubgCSkpIAcnJyAI6O
        jgB2dnYAioqKAHp6egCGhoYAfn5+AIKCggD+/v4ABAQEAP39/QAGBgYA+/v7APn5+QAKCgoA9/f3AAwM
        DAD19fUADg4OAA8PDwDz8/MAERERAPHx8QATExMA7+/vABUVFQDt7e0AFxcXAOvr6wAZGRkA6enpABsb
        GwDn5+cAHR0dAOXl5QAfHx8A4+PjACEhIQDh4eEAIyMjAN/f3wAlJSUA3d3dACcnJwDb29sAKSkpANnZ
        2QArKysA19fXAC0tLQDV1dUALy8vANPT0wAxMTEA0dHRADMzMwDPz88ANTU1AM3NzQA3NzcAy8vLADk5
        OQDJyckAOzs7AMfHxwA9PT0AxcXFAD8/PwDDw8MAQUFBAMHBwQBDQ0MAv7+/AEVFRQC9vb0AR0dHALu7
        uwBJSUkAt7e3AEtLSwC1tbUATU1NALOzswBPT08AsbGxAFFRUQCvr68AU1NTAK2trQBVVVUAq6urAFdX
        VwCpqakAWVlZAKenpwBbW1sApaWlAF1dXQCjo6MAX19fAKGhoQBhYWEAn5+fAGNjYwCdnZ0AZWVlAJub
        mwBnZ2cAmZmZAGlpaQCXl5cAa2trAJWVlQBtbW0Ak5OTAG9vbwCRkZEAcXFxAI+PjwBzc3MAjY2NAHV1
        dQCLi4sAd3d3AImJiQB5eXkAh4eHAHt7ewCFhYUAfX19AIODgwB/f38AgYGBAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEgJ1kTRH4BAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEgwtfJNuBH
        fgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBoNOh
        ua0scZCqpkYgK9a6Rn4BAQGKzhABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAUCO
        mtqpDcg7sQ33DdnIF7coteYQkEJ+cZPqQgGAEEtAfiAig34BRMCsQgEBAQEBAQEBAQEBAQEBAQEBAQEg
        VcgbAunJleyCmnBQm50D7geXvRZe1h2ojNdBNiIBjml7E8Tud95bh8YLDVUBAUKkEYNJTSB+AQEBQCB+
        AQHSAmSnl52nqZEGAYPoEkpywG2vxcA+p8UU5JIaP2giAU90vfCnl52jwV/uCaPAAQGq3wLy7+2yQgEB
        QrD5SwEBBSQLB3nUxj5O4oAB2kqPb0b0FOogXQNSl9ggbD/BRwEn37N0Bdni52TIfSEUvAEBxiqhmZ9e
        M4UBAUvPhvOAAVwL5p6FfgEZn3wQAdyPk9RPHK8XAZpsJAUxfvEfo7p+J90W4yg1QJQVRn2EKrYBfjWR
        i8kGXxB+AQGWMh8NlAE2rRcBAQEBvrXRqAHejyYzCmYYtgGDPkWXMYDuRZPtR1PTuXRQBn4BAQH4ISq2
        ASDqj4t5yDGiggEBEWqEp7Z+eKNnAQEBASfbXGWA2kwoDMBc1xMBAd6Nj9hGe0xUq/Blu2Z9nTtEAQEB
        9iGjXQFH8xKPD7GraLyCAZjhSCTvjDubc4IBAQFGeQvpEQS326TOpT4jAQHITok5S+cUOq+zMhTv1qsc
        nAEBAeiLk2l+V2IolfneaJ9mEwGgbhQLtQwZoXqSAQEBfrTFC3froRuC2FB1gwEBuLEm2ArNYMA3DaNU
        1LDLu8J+AQExTobXnHOXxVgaU7LTC8oBrjID6adswBbdUQEBAQGF6lStq2QpAdZSbX4BASBda4pX2XpN
        RKrOxocQfal0VxB+sC6No9toUDtspR5x0aPQAWEsbF9sC1u9z1UBAQEBASPxVgvihQGuB64BAQEBAQEB
        gwqaQAEBAQEBfi2/CxrajqzNWF6bm2RVNaWdBZkuFUDenT2OYy6wyb9bAQEBAQGAR2Nhin4BQqRCAQEB
        AQEBAQEBAQEBAQEBAQFEZzYw5aSsz2I3cr9pgofO+B1xW4MQ+FLWfkRnCOMsMX4BAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAYWiBClCrM/BuBG0IAEBgI5GQAEBljtmWQEBg0b0oxsgAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAazPwbYBAQEBAQEBAQEBAUCaCoMBAQF+Gaf1kAEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQGsz8G2AQEBAQEBAQEBAQEBAQEBAQEBAb63zykB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBrM/BtgEBAQEBAQEBAQEBAQEBAQEBAQGg
        2xZhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAazPwbYBAQEBAQEBAQEBAQEBAQEB
        AQEBRj0U0gEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQGo2WZZAQEBAQEBAQEBAQEB
        AQEBAQEBAUA3oWsBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBkNLelAEBAQEBAQEB
        AQEBAQEBAQEBAQEBV9uuAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAYAQR4ABAQEB
        AQEBAQEBAQEBAQEBAQEBAUKkQgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBgEeurI5+AQEBAQEBAQEBhboQfgEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQGDriVAAQEBAQF+ji0Tg54eNDT2noABAQEBgk1LQDGnc0QBg6hLAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBuGLrmgEBAQEBRjlezw48kxYWWOsRfiKopKT67ph2gclJAQpuOwEB
        AQEBAQEBAQEBAQEBAUIpMTG0Rn5ATStXkOhIVMABAQEBAahon6NULo/3NccL5iPe0XLQydeq5X/DSQFf
        XuMBAQEBgJCorCkjQAEBAYC4ZAupv/CSV3LJ0WvyRQXIAQEBAQG0wb159WxMdJYGWl7kFqnP2BhoCt8/
        xUcBwhbhAQGAkMZ6GsvT79CUgAERD6EN11oLOTinYM3cHYhOyAEBAQEBWzBmrpLCv7fAR+uVxwUPWboY
        aBVuQWCaAcYLDwF+Tfe1o1q7s52p6SuCFcPBF557pcVUx8ywSXWIlc4BAQEBAba/yQoBivihfIxpUBRW
        xH62GGhdbEOlWwEzFAIBjvoswXsXW13uGKnjT8at55oBtrWXmTmDAQHqRZHUfgEBAQGuyb24AX6+XmAv
        YaMkvVUBWctsyg0STuqK7Js5gMZeMNQifgEBILh7c5hpoT2MAQgyhhZVAQEB5oaLPiIBAQEBoG4LxAEB
        jPpYbuQoHzQRAZjscRfBWKFi1NFYYwjbqXtGAQEBAQGAR5ZA2JvmQgGK0UE0IgEBID0JmTDkJYABAY71
        mdQBAX6qyU5Yi39ugAFAEZJX1QcHKr+j1aB1FMuqfgEBAQEBAQEBAdoF5oABfjh/GkQBAaLTFGpYLN3c
        W0eufJPmRod+gllyZMVoTQEBAQEBQqymK8eXleqD1a3WggEBAQEBAQEBAQEzo+kRAQE6QdFGAYDQCzay
        4g0on2JxBwNFwwJ7zkSAlCumIn4BAQEBAQEBAYK47w6OAbHVogEBAQEBAQEBAQEBsMc0WQEB4Ez5RgGM
        9p9zgoUpdTjdN2JMP4hMTFgvAQEBAQEBAQEBAQEBAQEBQJSDAQFS+UYBAQEBAQEBAQEBARBp5ksBAYrS
        EYABkhvVCgEBAUKcU4wV9RLF5uDUjAEBAQEBAQEBgpwnggEBAQEBAQEBKB2KAQEBAQEBAQEBAQF+ipKA
        AQEBAQEBAYCWpkIBAQEBAQEBARepB0+AQn4BAQEBAQEBASXq9qABAQEBAQEBAaF6kAEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQG4tcUKAQEBAQEBAQEBAQGOyBmSAQEBAQEBAQEWyyt+AQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBV8O1vAEBAQEBAQEBAQEBgBBHgAEBAQEBAQEB5Sx4UUAB
        AQEBfkYrIAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAZx2x7YBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAS8w
        LN0MJ0uWnLb5aLYBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQFAnrQgAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQFEac2rt2ztPOPDKsWuAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAYVX9g2xC6taGDoXIAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBfhCsYTExF7ZLQgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>